name: E2E Cypress tests
on:
  pull_request:
    branches:
      - tianleh-test
  push:
    branches:
      - tianleh-test
jobs:
  tests:
    name: Run Cypress E2E tests
    runs-on: ubuntu-latest
    env:
      # prevents extra Cypress installation progress messages
      CI: 1
      # avoid warnings like "tput: No value for $TERM and no -T specified"
      TERM: xterm
    steps:
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          # TODO: Parse this from index management plugin
          java-version: 13
      - name: Checkout
        uses: actions/checkout@v2
        with:
          path: security
          # TODO: Move this after Kibana plugin setup so we can pull down the correct branch to support all opendistro branches
          repository: opendistro-for-elasticsearch/security
#      - name: Run elasticsearch with plugin
#        run: |
#          cd security
#          ./gradlew run &
#          timeout 300 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost:9200)" != "200" ]]; do sleep 5; done'
      - name: Checkout Security Kibana plugin
        uses: actions/checkout@v2
        with:
          path: security-kibana-plugin
      - name: Get Kibana version
        id: kibana_version
        run: |
          echo "::set-output name=kibana_version::$(node -p "(require('./security-kibana-plugin/package.json').kibana.version).match(/[.0-9]+/)[0]")"
      - name: Get Opendistro version
        id: opendistro_version
        run: |
          echo "::set-output name=opendistro_version::$(node -p "(require('./security-kibana-plugin/package.json').version).match(/[.0-9]+/)[0]")"

      - name: Run elasticsearch with plugin
        run: |
          wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-oss-${{ steps.kibana_version.outputs.kibana_version }}-darwin-x86_64.tar.gz
          tar -xzf elasticsearch-oss-${{ steps.kibana_version.outputs.kibana_version }}-darwin-x86_64.tar.gz
          cd elasticsearch-${{ steps.kibana_version.outputs.kibana_version }}/
          bin/elasticsearch-plugin install https://d3g5vo6xdbdb9a.cloudfront.net/downloads/elasticsearch-plugins/opendistro-security/opendistro_security-${{ steps.opendistro_version.outputs.opendistro_version }}.zip
          sh plugins/opendistro_security/tools/install_demo_configuration.sh
          bin/elasticsearch &
          timeout 300 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost:9200)" != "200" ]]; do sleep 5; done'
      - name: Checkout Kibana
        uses: actions/checkout@v2
        with:
          repository: opendistro-for-elasticsearch/kibana-oss
          ref: ${{ steps.kibana_version.outputs.kibana_version }}
          token: ${{ secrets.GITHUB_KIBANA_OSS }}
          path: kibana
      - name: Get node and yarn versions
        id: versions
        run: |
          echo "::set-output name=node_version::$(node -p "(require('./kibana/package.json').engines.node).match(/[.0-9]+/)[0]")"
          echo "::set-output name=yarn_version::$(node -p "(require('./kibana/package.json').engines.yarn).match(/[.0-9]+/)[0]")"
      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: ${{ steps.versions.outputs.node_version }}
          registry-url: 'https://registry.npmjs.org'
      - name: Install correct yarn version for Kibana
        run: |
          npm uninstall -g yarn
          echo "Installing yarn ${{ steps.versions_step.outputs.yarn_version }}"
          npm i -g yarn@${{ steps.versions.outputs.yarn_version }}
      - name: Bootstrap plugin/kibana
        env:
          CYPRESS_INSTALL_BINARY: 0
        run: |
          mkdir -p kibana/plugins
          mv security-kibana-plugin kibana/plugins
          cd kibana/plugins/security-kibana-plugin
          yarn kbn bootstrap
      - name: Run kibana server
        run: |
          security_config='
            elasticsearch.username: "kibanaserver"\n
            elasticsearch.password: "kibanaserver"\n
            elasticsearch.hosts: "https://localhost:9200"\n
            elasticsearch.ssl.verificationMode: none\n
            elasticsearch.requestHeadersWhitelist: ["securitytenant","Authorization"]\n

            opendistro_security.multitenancy.enabled: true\n
            opendistro_security.multitenancy.tenants.preferred: ["Private", "Global"]\n
            opendistro_security.readonly_mode.roles: ["kibana_read_only"]\n
            opendistro_security.auth.type: "basicauth"\n
          '
          echo $security_config >> kibana/config/kibana.yml
          cd kibana/plugins/security-kibana-plugin
          yarn start --no-base-path --no-watch &
          sleep 300
          curl localhost:5601/api/status
          # timeout 300 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost:5601/api/status)" != "200" ]]; do sleep 5; done'
      - name: Cache Cypress
        id: cache-cypress
        uses: actions/cache@v1
        with:
          path: ~/.cache/Cypress
          key: cypress-cache-v2-${{ runner.os }}-${{ hashFiles('**/package.json') }}
      # now let's install Cypress binary
      - run: npx cypress install
      - run: npx cypress cache list
      # for now just chrome, use matrix to do all browsers later
      - name: Cypress tests
        run: |
          cd kibana/plugins/security-kibana-plugin
          yarn run cypress run --browser chrome
      # Screenshots are only captured on failure, will change this once we do visual regression tests
      - uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: cypress-screenshots
          path: kibana/plugins/security-kibana-plugin/cypress/screenshots
      # Test run video was always captured, so this action uses "always()" condition
      - uses: actions/upload-artifact@v1
        if: always()
        with:
          name: cypress-videos
          path: kibana/plugins/security-kibana-plugin/cypress/videos
